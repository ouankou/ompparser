//******************************************************************************************************************//
// Copyright (c) 2018-2019, High Performance Computing Architecture and System
// research laboratory at University of North Carolina at Charlotte (HPCAS@UNCC)
// and Lawrence Livermore National Security, LLC.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//*****************************************************************************************************************//

//For testing purpose, there are several extra empty lines.
//The final version should only contain necessary information.
//This is not a C/C++ code, so there's no required writing style.
//Only two kinds of special lines will be recognized.
//One is starting with "omp", which is the input.
//The other one is starting with "PASS: ", which is the result for validation.

#pragma omp declare reduction(+ : const, int : a) initializer(omp_priv=foo(c,a,d))
PASS: #pragma omp declare reduction ( + : const,int : a ) initializer (omp_priv=foo(c,a,d))

#pragma omp declare reduction(&& : const, int : a) initializer(omp_priv=a)
PASS: #pragma omp declare reduction ( && : const,int : a ) initializer (omp_priv=a)

#pragma omp declare reduction(^ : const, int : a) initializer(omp_priv=test)
PASS: #pragma omp declare reduction ( ^ : const,int : a ) initializer (omp_priv=test)
// invalid test without paired validation.

#pragma omp declare reduction(max : const, int : a) initializer(omp_priv=foo(c,a,d))

#pragma omp declare reduction(- : const, int : a) initializer(omp_p=foo(c,a,d))

#pragma omp declare reduction(|| : const, int : a) initializer(omp_priv= c,a,d)

