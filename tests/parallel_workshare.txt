//******************************************************************************************************************//
// Copyright (c) 2018-2019, High Performance Computing Architecture and System
// research laboratory at University of North Carolina at Charlotte (HPCAS@UNCC)
// and Lawrence Livermore National Security, LLC.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//*****************************************************************************************************************//

//For testing purpose, there are several extra empty lines.
//The final version should only contain necessary information.
//This is not a C/C++ code, so there's no required writing style.
//Only two kinds of special lines will be recognized.
//One is starting with "omp", which is the input.
//The other one is starting with "PASS: ", which is the result for validation.

// invalid test without paired validation.

#pragma omp parallel workshare private (a, b) private (a, c)

#pragma omp parallel workshare num_threads (3*5+4/(7+10))

#pragma omp parallel workshare firstprivate (x, y)

#pragma omp parallel workshare shared (a, b, c[1:10])

#pragma omp parallel workshare copyin (a[foo(goo(x)):20],a,y)

#pragma omp parallel workshare default (shared)

#pragma omp parallel workshare default (none)

#pragma omp parallel workshare if (a) if (parallel : b) default (firstprivate)

#pragma omp parallel workshare proc_bind (master)

#pragma omp parallel workshare proc_bind (close) default (private)

#pragma omp parallel workshare proc_bind (spread)

#pragma omp parallel workshare reduction (inscan, + : a, foo(x)) reduction (abc : x, y, z) reduction (task, user_defined_value : x, y, z) reduction (inscan, max : a, foo(x))

#pragma omp parallel workshare allocate (omp_high_bw_mem_alloc : m, n[1:5]) allocate (no, allo, cator) allocate (user_defined_test : m, n[1:5])

#pragma omp parallel workshare private (a[foo(x, goo(x, y)):100], b[1:30], c) num_threads (3*5+4/(7+10)) allocate (omp_user_defined_mem_alloc : m, n[1:5]) allocate (no, allo, cator)

#pragma omp parallel workshare private (a, b, c) private (a, b, e) firstprivate (foo(x), y), shared (a, b, c[1:10]) // invalid test without paired validation.

#pragma omp parallel workshare private (a[foo(x, goo(x, y)):100], b[1:30], c) firstprivate (foo(x), y), shared (a, b, c[1:10]) num_threads (4)

#pragma omp parallel workshare reduction (tasktest : x11, y, z) allocate (user_defined_test : m, n[1:5]) allocate (omp_high_bw_mem_alloc : m, n[1:5]) reduction (inscan, max : a, foo(x))





