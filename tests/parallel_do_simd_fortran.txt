/*
 * Copyright (c) 2018-2020, High Performance Computing Architecture and System
 * research laboratory at University of North Carolina at Charlotte (HPCAS@UNCC)
 * and Lawrence Livermore National Security, LLC.
 *
 * SPDX-License-Identifier: (BSD-3-Clause)
 */

//For simd testing purpose, there are several extra empty lines.
//The final version should only contain necessary information.
//This is not a C/C++ code, so there's no required writing style.
//Only two kinds of special lines will be recognized.
//One is starting with "omp", which is the input.
//The other one is starting with "PASS: ", which is the result for simd validation.

!$omp parallel do simd private (a, b) private (a, c)
PASS: !$omp parallel do simd private (a, b, c)

!$omp parallel do simd private(a,b,c)
PASS: !$omp parallel do simd private (a, b, c)

!$omp parallel do simd firstprivate(tol,b,c)
PASS: !$omp parallel do simd firstprivate (tol, b, c)

!$omp parallel do simd num_threads (3*5+4/(7+10))
PASS: !$omp parallel do simd num_threads (3*5+4/(7+10))

!$omp parallel do simd firstprivate (x, y)
PASS: !$omp parallel do simd firstprivate (x, y)

!$omp parallel do simd lastprivate(conditional:a,b,c)
PASS: !$omp parallel do simd lastprivate (conditional: a, b, c)

!$omp parallel do simd linear(a,b,c:2)
PASS: !$omp parallel do simd linear (a, b, c:2)

!$omp parallel do simd schedule(monotonic,simd:runtime,2)
PASS: !$omp parallel do simd schedule (monotonic,simd:runtime, 2)

!$omp parallel do simd collapse(a)
PASS: !$omp parallel do simd collapse (a)

!$omp parallel do simd ordered(a)
PASS: !$omp parallel do simd ordered (a)

!$omp parallel do simd shared (a, b, c[1:10])
PASS: !$omp parallel do simd shared (a, b, c[1:10])

!$omp parallel do simd copyin (a[foo(goo(x)):20],a,y)
PASS: !$omp parallel do simd copyin (a[foo(goo(x)):20], a, y)

!$omp parallel do simd default (shared)
PASS: !$omp parallel do simd default (shared)

!$omp parallel do simd default (none)
PASS: !$omp parallel do simd default (none)

!$omp parallel do simd if (a) if (parallel : b) default (firstprivate)
PASS: !$omp parallel do simd if (a) if (parallel: b) default (firstprivate)

!$omp parallel do simd proc_bind (master)
PASS: !$omp parallel do simd proc_bind (master)

!$omp parallel do simd proc_bind (close) default (private)
PASS: !$omp parallel do simd proc_bind (close) default (private)

!$omp parallel do simd proc_bind (spread)
PASS: !$omp parallel do simd proc_bind (spread)

!$omp parallel do simd reduction (inscan, + : a, foo(x)) reduction (abc : x, y, z) reduction (task, user_defined_value : x, y, z) reduction (inscan, max : a, foo(x))
PASS: !$omp parallel do simd reduction (inscan, + : a, foo(x)) reduction (abc : x, y, z) reduction (task, user_defined_value : x, y, z) reduction (inscan, max : a, foo(x))

!$omp parallel do simd allocate (omp_high_bw_mem_alloc : m, n[1:5]) allocate (no, allo, cator) allocate (user_defined_test : m, n[1:5])
PASS: !$omp parallel do simd allocate (omp_high_bw_mem_alloc: m, n[1:5]) allocate (no, allo, cator) allocate (user_defined_test: m, n[1:5])

!$omp parallel do simd safelen(4)
PASS: !$omp parallel do simd safelen (4)

!$omp parallel do simd simdlen(4)
PASS: !$omp parallel do simd simdlen (4)

!$omp parallel do simd aligned(*a,&b,c:2)
PASS: !$omp parallel do simd aligned (*a, &b, c:2)

!$omp parallel do simd nontemporal(a)
PASS: !$omp parallel do simd nontemporal (a)


// invalid test without paired validation.

!$omp parallel do simd private (a[foo(x, goo(x, y)):100], b[1:30], c) num_threads (3*5+4/(7+10)) allocate (omp_user_defined_mem_alloc : m, n[1:5]) allocate (no, allo, cator)

!$omp parallel do simd private (a, b, c) private (a, b, e) firstprivate (foo(x), y), shared (a, b, c[1:10])

!$omp parallel do simd private (a[foo(x, goo(x, y)):100], b[1:30], c) firstprivate (foo(x), y), shared (a, b, c[1:10]) num_threads (4)

!$omp parallel do simd reduction (tasktest : x11, y, z) allocate (user_defined_test : m, n[1:5]) allocate (omp_high_bw_mem_alloc : m, n[1:5]) reduction (inscan, max : a, foo(x))

!$omp parallel do simd lastprivate(userde:a,b,c)

!$omp parallel do simd collapse

!$omp parallel do simd nowait(dsfasf)

!$omp parallel do simd order

!$omp parallel do simd schedule(use,user:runtime,2)

!$omp parallel do simd schedule(simd,simd:runtime,2)

!$omp parallel do simd dist_schedule(static,2)

!$omp parallel do simd if (simd:a)

!$omp parallel do simd nowait

!$omp  parallel do simd order

!$omp  parallel do simd schedule(use,user:runtime,2)

!$omp  parallel do simd schedule(simd,simd:runtime,2)

!$omp  parallel do simd dist_schedule(user,2)

!$omp  parallel do simd nontemporal

!$omp  parallel do simd safelen

!$omp  parallel do simd simdlen

